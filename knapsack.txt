
ques-0/1 knapsack using dp memorization method.



#include <iostream>


using namespace std;
 int t[100][100];
   

int knapSack(int wt[],int val[],int w,int n){
    if(n==0||w==0){
        return 0;
    }
    if(t[n][w]!=-1){
        return t[n][w];
    }
    if(wt[n-1]<=w){
        return t[n][w]=max(val[n-1]+knapSack(wt,val,w-wt[n-1],n-1),knapSack(wt,val,w,n-1));
    }
    else{
        return t[n][w]=knapSack(wt,val,w,n-1);
    }
}

int main()
{
    int val[3]={60,100,120};
    int wt[3]={10,20,30};
    int w=50;
    for(int i=0;i<100;i++){
      for(int j=0;j<100;j++){
         t[i][j]=-1;
      }
    }
    cout<<knapSack(wt,val,w,3);

    return 0;
}